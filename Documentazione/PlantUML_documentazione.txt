@startuml
title Solidi Geodetici e loro duali

package PoliedriLibrary <<Folder>>
{

class Utils
    {
    + ImportMesh(PoliedriMesh& mesh, unsigned int p, unsigned int q) : bool
    + ScritturaCelle(const PoliedriMesh& mesh, const string& nomeBase) : bool
    + CostruisciDualMesh(const PoliedriMesh& meshOriginale, PoliedriMesh& meshDuale) : void
    + Export(const PoliedriMesh& mesh, const string& nomeBase) : void
    + Mappa_LatoFaccia(const PoliedriMesh& meshTriangolata) : map<std::pair<unsigned int, unsigned int>, std::vector<unsigned int>>
    + ProiettaSuSfera(PoliedriMesh& mesh) : void
    
    .. TEST PROIEZIONE ..
    TestProiezioneSuSfera
    }
    
class CostruzioneSolidi
    {
    + CreaTetraedro(PoliedriMesh& mesh) : void
    + CreaCubo(PoliedriMesh& mesh) : void
    + CreaOttaedro(PoliedriMesh& mesh) : void
    + CreaDodecaedro(PoliedriMesh& mesh) : void
    + CreaIcosaedro(PoliedriMesh& mesh) : void
    }
    
class Triangolazione
    {
    + TrovaSpigolo(map<std::pair<unsigned int, unsigned int>, unsigned int>& mappaSpigoli, PoliedriMesh& mesh, unsigned int start, unsigned int end) : unsigned int
    + TriangolaFacceClasseI(const PoliedriMesh& meshIniziale, PoliedriMesh& meshRisultato, unsigned int livelloSuddivisione) : void
    + VerticeId(const Eigen::Vector3d& punto, map<Eigen::Vector3d, unsigned int, CompareVector3d>& mappaVertici, PoliedriMesh& meshRisultato) : unsigned int
    + TriangolaFacceClasseII(const PoliedriMesh& meshIniziale, PoliedriMesh& meshRisultato, unsigned int b) : void
    + CostruisciDualMesh(const PoliedriMesh& meshTriangolata, PoliedriMesh& meshDuale) : void
    
    .. TEST TRIANGOLAZIONE I ..
    TestTriangolaFacceClasseI_livello1
    TestTriangolaFacceClasseI_livello2
    TestTriangolaFacceClasseI_livello0
    
    .. TEST TRIANGOLAZIONE II ..
    TestTriangolaFacceClasseII_livello1
    TestTriangolaFacceClasseII_livello2
    TestTriangolaFacceClasseII_livello0
    TestValiditàTriangoli
    TestAumentoVertici
    
    .. TEST DUALITÀ ..
    TestDualeTriangoloSingolo
    TestDualeTriangoliAdiacenti
    }
    
struct CompareVector3d
    {
    + operator()(const Eigen::Vector3d& a, const Eigen::Vector3d& b) const : bool
    }

class ShortestPath
    {
    + CalcolaShortPath(unsigned int startId, unsigned int endId, double& totalLenght) : std::vector<unsigned int>
    + MarcaCammino(const std::vector<unsigned int>& path) : void
    + getVerticiMarcati() const : const std::vector<int>&
    + getLatiMarcati() const : const std::vector<int>&
    + lista_adiacenza : std::vector<std::vector<std::pair<unsigned int, double>>>
    + verticiMarcati : std::vector<int>
    + latiMarcati : std::vector<int>
    + CostruisciGrafo() : void
    + CalcolaDistanza(unsigned int id1, unsigned int id2) : double
    
    .. TEST CAMMINO MINIMO ..
    TestCostruzioneGrafo
    TestCalcolaDistanza
    TestGrafoSemplice
    TestCamminoMinimoInesistente
    TestStessoNodo
    TestMarcaturaLatiVertici
    }

struct PoliedriMesh
    {
    ' Vertici
    + NumCell0Ds : unsigned int
    + Cell0DsId : std::vector<unsigned int>
    + Cell0DsCoordinates : Eigen::MatrixXd
    
    ' Lati
    + NumCell1Ds : unsigned int
    + Cell1DsId : std::vector<unsigned int>
    + Cell1DsExtrema : Eigen::MatrixXi
    
    ' Facce
    + NumCell2Ds : unsigned int
    + Cell2DsId : std::vector<unsigned int>
    + Cell2DsNumVertices : std::vector<unsigned int>
    + Cell2DsVertices : std::vector<std::vector<unsigned int>>
    + Cell2DsNumEdges : std::vector<unsigned int>
    + Cell2DsEdges : std::vector<std::vector<unsigned int>>
    
    ' Poliedri
    + NumCell3Ds : unsigned int
    + Cell3DsId: std::vector<unsigned int>
    + Cell3DsNumVertices : std::vector<unsigned int>
    + Cell3DsVertices : std::vector<std::vector<unsigned int>>
    + Cell3DsNumEdges : std::vector<unsigned int>
    + Cell3DsEdges : std::vector<std::vector<unsigned int>>
    + Cell3DsNumFaces : std::vector<unsigned int>
    + Cell3DsFaces : std::vector<std::vector<unsigned int>>
    
    ' Spigoli adiacenti alle facce
    + SpigoliAdiacentiFacce : std::vector<std::pair<int, int>>
    
    ' Vertici e lati del cammino minimo
    + Cell0DsShortPath : std::vector<int>
    + Cell1DsShortPath : std::vector<int>
    
    .. TEST POLIEDRI ..
    TestCell0Ds
    TestCell1Ds
    TestCell2Ds
    TestCell3Ds
    }
    
    Utils --> PoliedriMesh : usa
    CostruzioneSolidi --> PoliedriMesh : costruisce
    Triangolazione --> PoliedriMesh : triangola
    Triangolazione --> CompareVector3d : usa per ordinare
    ShortestPath --> PoliedriMesh : usa
}

package Gedim::UCDUtilities <<Frame>>
{

}
Utils::Export --> Gedim::UCDUtilities
@enduml